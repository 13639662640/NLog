<?xml version="1.0" encoding="windows-1250" ?>
<?xml-stylesheet type="text/xsl" href="style.xsl" ?>
<content lang="en" id="faq">
    <h1>Frequently Asked Questions</h1>
    <faq-index />

    <faq>
        <faq-question>How do I properly log exceptions?</faq-question>
        <faq-answer>
            <p>
                Exceptions require special treatment in NLog.
                You need to call a Logger method which takes Exception as its second argument. The method names match available log levels:
            </p>

            <ul>
                <li><b>TraceException()</b></li>
                <li><b>DebugException()</b></li>
                <li><b>InfoException()</b></li>
                <li><b>WarnException()</b></li>
                <li><b>ErrorException()</b></li>
                <li><b>FatalException()</b></li>
                <li><b>LogException()</b> - takes log level as a parameter</li>
            </ul>

            <p>
                Typically you call one of these methods in the <code>catch</code> handler:
            </p>

            <code lang="C#">
                <![CDATA[
                try
                {
                    // some code which may throw
                }
                catch (MyException ex)
                {
                    logger.ErrorException("Got exception.", ex);
                }
                ]]>
            </code>
            <p>
                To write the details of the exception, use the <code>${exception}</code>&#160;<a href="lr.exception.html">layout renderer</a> in
                your layout. Depending on the desired output you may want to specify different value for the "format" argument. The
                following example displays the result of calling <code>ToString()</code> on the exception object.
            </p>
            <code lang="XML">
                <![CDATA[
                <nlog>
                    <targets>
                        <target name="f" type="File" layout="${longdate} ${message} ${exception:format=tostring}" />
                    </targets>
                    <rules>
                        <logger name="*" writeTo="f" />
                    </rules>
                </nlog>
                ]]>
            </code>
        </faq-answer>
    </faq>
    <faq>
        <faq-question>How do I configure logging for a component?</faq-question>
        <faq-answer>
            <p>
If you can configure logging on the client-side (by providing the appropriate configuration file in application's directory), you can
follow the <link href="tutorial">tutorial</link>.
</p>

<p>
However, if you do not control the clients, or they are
not all local, or you wish a solution encapsulated to your
component or assembly, you may wish to configure logging
locally in your component assembly.
</p>

<p>
    The solution is to create a log manager just for your component that will manage its own loggers. You need to load the configuration
    file by hand and/or configure logging programmatically but your configuration will be independent from application's config.
</p>

<p>The following solution is usable for components not in the GAC. (Components in the GAC need to implement below method GetNLogConfigFilepath in some
    application-dependent fashion.)</p>

<code lang="C#">
    internal class MyLogManager
    {
        // A Logger dispenser for the current assembly
        public static readonly LogFactory Instance
                = new LogFactory(new XmlLoggingConfiguration(GetNLogConfigFilePath()));

        //
        // Use a config file located next to our current assembly dll
        // eg, if the running assembly is c:\path\to\MyComponent.dll
        // the config filepath will be c:\path\to\MyComponent.nlog
        //
        // WARNING: This will not be appropriate for assemblies in the GAC
        //
        private static string GetNLogConfigFilePath()
        {
            // Use name of current assembly to construct NLog config filename

            Assembly thisAssembly = Assembly.GetExecutingAssembly();

            return Path.ChangeExtension(thisAssembly.Location, ".nlog");
        }
    }
</code>

Then create loggers with:

<code lang="C#">
    Logger logger = MyLogManager.Instance.GetLogger("name");
</code>

or

<code lang="C#">
    Logger logger = MyLogManager.Instance.GetCurrentClassLogger();
</code>

<p>
    The loggers are independent from the ones created with NLog
    LogManager, and thus you can have safe private logging. That is,
    this will not interfere with other assemblies or the application
    exe itself using NLog.
</p>

<p>
    If you want multiple assemblies to share this MyLogManager -
    just make it a public class and get others to use it.
</p>

<p>
    You need to make sure that the configuration is properly
closed when the process terminates (set
MyLogManager.Instance.Configuration to null) or you may
lose some log output.

You may want to hook AppDomain.ProcessExit and
AppDomain.DomainUnload events to turn off logging automatically.

See the code of <a href="http://svn.nlog-project.org/repos/nlog/trunk/NLog/src/NLog/LogManager.cs">LogManager.cs</a> for details.
</p>
        </faq-answer>
    </faq>
</content>
